package project;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ManageLibParks extends javax.swing.JFrame {

    public ManageLibParks() throws SQLException {
        initComponents();
        Vip v = new Vip();
        v.vipended();
        Defaulter d = new Defaulter();
        d.addstudent();
        timechecker();
        printlibparks();
    }
    String query1 = "SELECT * FROM librarypark";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        studentfield = new javax.swing.JTextField();
        noofstudentsfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bookbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        searchfield = new javax.swing.JTextField();
        combobox1 = new javax.swing.JComboBox<>();
        searchbtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(252, 134, 54), 2));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("M A N A G E  L I B R A R Y   P A R K S");

        noofstudentsfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noofstudentsfieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Student I.D :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("No. of Students :");

        bookbtn.setBackground(new java.awt.Color(255, 102, 0));
        bookbtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bookbtn.setForeground(new java.awt.Color(255, 255, 255));
        bookbtn.setText("B O O K");
        bookbtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 7));
        bookbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookbtnActionPerformed(evt);
            }
        });

        table.setBackground(new java.awt.Color(204, 204, 204));
        table.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Park I.D", "Availabilty", "Issued By", "Issue Time", "Due Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setGridColor(new java.awt.Color(51, 51, 51));
        table.setRowHeight(30);
        table.setShowGrid(true);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project/images/cross.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setRolloverEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project/images/back_white.png"))); // NOI18N
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        searchfield.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchfield.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        searchfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchfieldActionPerformed(evt);
            }
        });

        combobox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        combobox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "< Search By : >", "Park I.D", "Issuer I.D", "All Parks" }));
        combobox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox1ActionPerformed(evt);
            }
        });

        searchbtn1.setBackground(new java.awt.Color(255, 102, 0));
        searchbtn1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        searchbtn1.setForeground(java.awt.Color.white);
        searchbtn1.setText("S E A R C H");
        searchbtn1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 7));
        searchbtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchbtn1.setRolloverEnabled(false);
        searchbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(192, 192, 192)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(noofstudentsfield, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(studentfield, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(404, 404, 404)
                        .addComponent(bookbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combobox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1))
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentfield, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noofstudentsfield, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(26, 26, 26)
                .addComponent(bookbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getAccessibleContext().setAccessibleName("form");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void noofstudentsfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noofstudentsfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noofstudentsfieldActionPerformed

    private void bookbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookbtnActionPerformed

        if (studentfield.getText().equals("") || noofstudentsfield.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Fill all fields.");
        } else {

            if (noofstudentsfield.getText().matches("^[0-9]*$")) {
                if (Integer.parseInt(noofstudentsfield.getText()) > 10) {
                    JOptionPane.showMessageDialog(this, "Only 10 members are allowed in one Library Park.");
                } else {
                    try {
                        book();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "'Number Of Students' Field an only contain numbers.");
            }
        }

    }//GEN-LAST:event_bookbtnActionPerformed
    public void book() throws SQLException {
        Cipher c1 = new Cipher();
        Connection con = ConnectionProvider.getconnection();
        Statement statement = con.createStatement();
        Statement statement1 = con.createStatement();
        String query = "SELECT * FROM  student WHERE student_id='" + c1.encode(studentfield.getText()) + "' ";
        ResultSet result = statement.executeQuery(query);
        try {
            if (result.next()) {
                if (Integer.parseInt(noofstudentsfield.getText()) > 4) {
                    String query2 = "SELECT * FROM librarypark WHERE libparkavailability='" + c1.encode("Available") + "' LIMIT 1 ";
                    ResultSet result1 = statement.executeQuery(query2);
                    if (result1.next()) {
                        String queryx = "SELECT libpark_id FROM librarypark WHERE issueid='" + studentfield.getText() + "'";
                        Statement statementx = con.createStatement();
                        ResultSet resultx = statementx.executeQuery(queryx);
                        if (resultx.next()) {
                            JOptionPane.showMessageDialog(this, "One Student Can Issue Only one Library Park at a time.");
                        } else {
                            LocalDateTime now = LocalDateTime.now();
                            LocalDateTime due_time = now.plusHours(3);
                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss");
                            String str = formatter.format(now);
                            String str1 = formatter.format(due_time);
                            String parkid = result1.getString("libpark_id");
                            String query3 = "UPDATE librarypark SET libparkavailability='" + c1.encode("Not Available") + "' , issueid='" + Integer.parseInt(studentfield.getText()) + "' , issuetime='" + str + "' , duetime='" + str1 + "' WHERE libpark_id='" + parkid + "'";
                            statement1.executeUpdate(query3);
                            JOptionPane.showMessageDialog(this, "Park " + parkid + " is now booked by Student I.D " + studentfield.getText());
                            DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("YYYY/MM/dd");
                            String str2 = formatter1.format(now);
                            String query4 = "INSERT INTO libparkhistory VALUES('" + studentfield.getText() + "','" + parkid + "','" + str2 + "','" + str + "','" + str1 + "')";
                            statement.executeUpdate(query4);
                            printlibparks();
                            studentfield.setText("");
                            noofstudentsfield.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Sorry! No library park is available.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "You must have atleast 5 students to book the park.");
                }

            } else {
                JOptionPane.showMessageDialog(this, "I.D " + studentfield.getText() + " is not registered.");
            }
            timechecker();
        } catch (Exception e) {
        } finally {
            con.close();
            statement.close();
            statement1.close();
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        LibrarianDashboard ld;
        try {
            ld = new LibrarianDashboard();
            ld.show();
            dispose();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }//GEN-LAST:event_jLabel9MouseClicked

    private void searchfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchfieldActionPerformed

    private void combobox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combobox1ActionPerformed

    private void searchbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtn1ActionPerformed
        Cipher cipher = new Cipher();
        if (searchfield.getText().equals("") && combobox1.getSelectedIndex() != 3) {
            JOptionPane.showMessageDialog(this, "Please Fill Search Bar.");
        } else {
            if (combobox1.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Please Select Option To Filter Result.");
            } else {
                if (combobox1.getSelectedIndex() == 1) {
                    query1 = "SELECT * FROM librarypark WHERE libpark_id='" + cipher.encode(searchfield.getText()) + "' ";
                }
                if (combobox1.getSelectedIndex() == 2) {
                    query1 = "SELECT * FROM librarypark WHERE issueid='" + cipher.encode(searchfield.getText()) + "'";
                }
            }
        }
        if (combobox1.getSelectedIndex() == 3) {
            query1 = "SELECT * FROM librarypark";
        }
        try {
            printlibparks();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
        searchfield.setText("");
        combobox1.setSelectedIndex(0);
    }//GEN-LAST:event_searchbtn1ActionPerformed
    public void printlibparks() throws SQLException {
        Cipher c1 = new Cipher();
        Connection con = ConnectionProvider.getconnection();
        Statement statement = con.createStatement();
        try {
            ResultSet result2 = statement.executeQuery(query1);
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            while (result2.next()) {
                model.addRow(new String[]{Integer.toString(result2.getInt(1)), c1.decode(result2.getString(2)), Integer.toString(result2.getInt(3)), result2.getString(4), result2.getString(5)});
            }
            if (model.getRowCount() < 3) {
                model.setRowCount(3);
            }
        } catch (Exception e) {
        } finally {
            con.close();
            statement.close();
        }
    }

    void timechecker() throws SQLException {
        Cipher c1 = new Cipher();
        Connection con = ConnectionProvider.getconnection();
        Statement statement = con.createStatement();
        Statement statement1 = con.createStatement();
        try {
            String query = "SELECT * FROM  librarypark WHERE libparkavailability='" + c1.encode("Not Available") + "' ";
            ResultSet result2 = statement.executeQuery(query);
            for (int i = 0; i < 3; i++) {
                if (result2.next()) {
                    LocalDateTime now = LocalDateTime.now();
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm:ss");
                    String str = formatter.format(now);
                    Time a = java.sql.Time.valueOf(str);
                    int c = a.compareTo(result2.getTime(5));
                    if (c > 0) {
                        int id = result2.getInt(1);
                        String query2 = "UPDATE librarypark SET libparkavailability='" + c1.encode("Available") + "',issueid=0,issuetime='00:00:00',duetime='00:00:00' WHERE libparkavailability='" + c1.encode("Not Available") + "' AND libpark_id=" + id + "";
                        statement1.executeUpdate(query2);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        } finally {
            con.close();
            statement.close();
            statement1.close();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageLibParks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageLibParks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageLibParks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageLibParks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ManageLibParks().setVisible(true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookbtn;
    private javax.swing.JComboBox<String> combobox1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField noofstudentsfield;
    private javax.swing.JButton searchbtn1;
    private javax.swing.JTextField searchfield;
    private javax.swing.JTextField studentfield;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
